/*import { inject } from '@angular/core';
import { HttpEvent, HttpInterceptorFn, HttpRequest, HttpHandlerFn } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../../../services/auth.service';

export const tokenInterceptor: HttpInterceptorFn = (
  req: HttpRequest<unknown>,
  next: HttpHandlerFn
): Observable<HttpEvent<unknown>> => {
  const authService = inject(AuthService);
  const token = authService.getToken();

  if (token) {
    const cloned = req.clone({
      headers: req.headers.set('Authorization', `Bearer ${token}`)
    });
    return next(cloned);
  }

  return next(req);
};*/


// Type Angular qui d√©finit un intercepteur HTTP fonctionnel (Angular 15+)
import { HttpInterceptorFn } from '@angular/common/http';

// Permet d'injecter des services dans un contexte fonctionnel (sans classe)
import { inject } from '@angular/core';
import { AuthService } from '../../../services/auth.service';

// Service d‚Äôauthentification qui contient le token JWT

// authInterceptorFn est une fonction d‚Äôinterception HTTP.
// Elle est appel√©e automatiquement √† chaque requ√™te HTTP sortante.
// req est la requ√™te originale, next est ce qui permet de continuer la cha√Æne des appels.
export const authInterceptorFn: HttpInterceptorFn = (req, next) => {
 const authService = inject(AuthService); // Injecte dynamiquement le service d‚Äôauth
  const token = authService.getToken(); 
  
  console.log("Interceptor token r√©cup√©r√© : ", token);
  // R√©cup√®re le token stock√© (localStorage ou m√©moire)
// inject(AuthService) permet d‚Äôutiliser un service m√™me dans une fonction (sans constructeur)

// getToken() est une m√©thode dans AuthService qui retourne le token JWT actuel
  if (token) {
    const cloned = req.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });
    return next(cloned);
  }
// req.clone() : en Angular, les requ√™tes sont immutables, donc on doit les cloner pour les modifier

// Le token est envoy√© dans l‚Äôen-t√™te : Authorization: Bearer ey....
// Une donn√©e immuable (ou immutable en anglais) est une donn√©e que l'on ne peut pas modifier directement une fois qu'elle a √©t√© cr√©√©e.

// üëâ Au lieu de modifier l‚Äôobjet, on en cr√©e une copie modifi√©e.

// üì¶ En Angular, les requ√™tes HTTP (HttpRequest) sont immuables
// Cela veut dire que :

// On ne peut pas changer leurs propri√©t√©s (headers, URL, corps‚Ä¶) directement

// Pour les modifier, on doit en faire une copie avec .clone()
  return next(req);   //  Sinon, on laisse passer la requ√™te originale sans ajout d'en-t√™te
};
